<?xml version="1.0"?>

<configuration xmlns="urn:activemq" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude" xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">
  <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq:core ">
    <name>592b056d5ac8</name>
    <persistence-enabled>true</persistence-enabled>
    <!-- this could be ASYNCIO, MAPPED, NIO
             ASYNCIO: Linux Libaio
             MAPPED: mmap files
             NIO: Plain Java Files
         -->
    <journal-type>ASYNCIO</journal-type>
    <paging-directory>data/paging</paging-directory>
    <bindings-directory>data/bindings</bindings-directory>
    <journal-directory>data/journal</journal-directory>
    <large-messages-directory>data/large-messages</large-messages-directory>
    <journal-datasync>true</journal-datasync>
    <journal-min-files>2</journal-min-files>
    <journal-pool-files>10</journal-pool-files>
    <journal-device-block-size>4096</journal-device-block-size>
    <journal-file-size>10M</journal-file-size>
    <!--gracefull shutdown gives opportunity to await untill all process shutdwon after normal exit server -->
    <graceful-shutdown-enabled>true</graceful-shutdown-enabled>
    <graceful-shutdown-timeout>3000</graceful-shutdown-timeout>
    <!-- transactional gives guarantee to save message on disk before ascknowledge will be sent-->
    <journal-sync-non-transactional>true</journal-sync-non-transactional>
    <journal-sync-transactional>true</journal-sync-transactional>
    <!--cash for dublication detection-->
    <id-cache-size>500000</id-cache-size>
    <persist-id-cache>true</persist-id-cache>
    <!--
         This value was determined through a calculation.
         Your system could perform 83.33 writes per millisecond
         on the current journal configuration.
         That translates as a sync write every 12000 nanoseconds.

         Note: If you specify 0 the system will perform writes directly to the disk.
               We recommend this to be 0 if you are using journalType=MAPPED and journal-datasync=false.
        -->
    <journal-buffer-timeout>24000</journal-buffer-timeout>
    <!--
          When using ASYNCIO, this will determine the writing queue depth for libaio.
         -->
    <journal-max-io>4096</journal-max-io>
    <!--
          You can verify the network health of a particular NIC by specifying the <network-check-NIC> element.
           <network-check-NIC>theNicName</network-check-NIC>
          -->
    <!--
          Use this to use an HTTP server to validate the network
           <network-check-URL-list>http://www.apache.org</network-check-URL-list> -->
    <!-- <network-check-period>10000</network-check-period> -->
    <!-- <network-check-timeout>1000</network-check-timeout> -->
    <!-- this is a comma separated list, no spaces, just DNS or IPs
             it should accept IPV6

             Warning: Make sure you understand your network topology as this is meant to validate if your network is valid.
             Using IPs that could eventually disappear or be partially visible may defeat the purpose.
                      You can use a list of multiple IPs, and if any successful ping will make the server OK to continue running -->
    <!-- <network-check-list>10.0.0.1</network-check-list> -->
    <!-- use this to customize the ping used for ipv4 addresses -->
    <!-- <network-check-ping-command>ping -c 1 -t %d %s</network-check-ping-command> -->
    <!-- use this to customize the ping used for ipv6 addresses -->
    <!-- <network-check-ping6-command>ping6 -c 1 %2$s</network-check-ping6-command> -->
    <!-- how often we are looking for how many bytes are being used on the disk in ms -->
    <disk-scan-period>5000</disk-scan-period>
    <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
             that won't support flow control. -->
    <max-disk-usage>90</max-disk-usage>
    <!-- should the broker detect dead locks and other issues -->
    <critical-analyzer>true</critical-analyzer>
    <critical-analyzer-timeout>120000</critical-analyzer-timeout>
    <critical-analyzer-check-period>60000</critical-analyzer-check-period>
    <critical-analyzer-policy>HALT</critical-analyzer-policy>
    <!-- the system will enter into page mode once you hit this limit.
             This is an estimate in bytes of how much the messages are using in memory

              The system will use half of the available memory (-Xmx) by default for the global-max-size.
              You may specify a different value here if you need to customize it to your needs.

              <global-max-size>100Mb</global-max-size>

        -->
    <connectors>
      <connector name="local-connector">tcp://0.0.0.0:61616
            </connector>
      <!-- this is defined our inner connector we wiil use it for network cluster topology while forming cluster -->
      <!--<connector name="server2-connector">tcp://10.49.199.104:61616</connector>
            <connector name="server3-connector">tcp://10.49.199.105:61616</connector>-->
    </connectors>
    <acceptors>
      <!-- useEpoll means: it will use Netty epoll if you are on a system (Linux) that supports it -->
      <!-- amqpCredits: The number of credits sent to AMQP producers -->
      <!-- amqpLowCredits: The server will send the # credits specified at amqpCredits at this low mark -->
      <!-- Note: If an acceptor needs to be compatible with HornetQ and/or Artemis 1.x clients add
                       "anycastPrefix=jms.queue.;multicastPrefix=jms.topic." to the acceptor url.
                       See https://issues.apache.org/jira/browse/ARTEMIS-1644 for more information. -->
      <!-- Acceptor for every supported protocol -->
      <acceptor name="artemis">
                tcp://0.0.0.0:61616?needClientAuth=false;tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=CORE,AMQP,STOMP,HORNETQ,MQTT,OPENWIRE;useEpoll=true;amqpCredits=1000;amqpLowCredits=300
            </acceptor>
      <!-- AMQP Acceptor.  Listens on default AMQP port for AMQP traffic.-->
      <!-- <acceptor name="amqp">tcp://0.0.0.0:5672?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpLowCredits=300</acceptor>-->
      <!-- STOMP Acceptor. -->
      <!--<acceptor name="stomp">tcp://0.0.0.0:61613?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=STOMP;useEpoll=true</acceptor>-->
      <!-- HornetQ Compatibility Acceptor.  Enables HornetQ Core and STOMP for legacy HornetQ clients. -->
      <!--<acceptor name="hornetq">tcp://0.0.0.0:5445?anycastPrefix=jms.queue.;multicastPrefix=jms.topic.;protocols=HORNETQ,STOMP;useEpoll=true</acceptor>-->
      <!-- MQTT Acceptor -->
      <!--<acceptor name="mqtt">tcp://0.0.0.0:1883?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=MQTT;useEpoll=true</acceptor>-->
    </acceptors>
    <ha-policy>
      <replication>
        <master>
          <vote-on-replication-failure>true</vote-on-replication-failure>
          <check-for-live-server>true</check-for-live-server>
          <quorum-vote-wait>10</quorum-vote-wait>
          <quorum-size>2</quorum-size>
        </master>
      </replication>
    </ha-policy>
    <cluster-connections>
      <cluster-connection name="cluster">
        <address/>
        <connector-ref>local-connector</connector-ref>
        <check-period>1000</check-period>
        <connection-ttl>5000</connection-ttl>
        <min-large-message-size>50000</min-large-message-size>
        <call-timeout>3000</call-timeout>
        <retry-interval>500</retry-interval>
        <retry-interval-multiplier>1.0</retry-interval-multiplier>
        <max-retry-interval>5000</max-retry-interval>
        <initial-connect-attempts>-1</initial-connect-attempts>
        <reconnect-attempts>-1</reconnect-attempts>
        <use-duplicate-detection>true</use-duplicate-detection>
        <message-load-balancing>ON_DEMAND</message-load-balancing>
        <!-- <message-load-balancing>ON_DEMAND</message-load-balancing> this policy works only for predifined meesages, BUT NOT FOR DYNAMICLY CREATED -->
        <max-hops>1</max-hops>
        <confirmation-window-size>1048576</confirmation-window-size>
        <call-failover-timeout>-1</call-failover-timeout>
        <notification-interval>1000</notification-interval>
        <notification-attempts>100</notification-attempts>
        <!--<static-connectors>
                    <connector-ref>server2-connector</connector-ref>
                    <connector-ref>server3-connector</connector-ref>
                </static-connectors>-->
      </cluster-connection>
    </cluster-connections>
    <security-settings>
      <security-setting match="#">
        <permission type="createNonDurableQueue" roles="amq"/>
        <permission type="deleteNonDurableQueue" roles="amq"/>
        <permission type="createDurableQueue" roles="amq"/>
        <permission type="deleteDurableQueue" roles="amq"/>
        <permission type="createAddress" roles="amq"/>
        <permission type="deleteAddress" roles="amq"/>
        <permission type="consume" roles="amq"/>
        <permission type="browse" roles="amq"/>
        <permission type="send" roles="amq"/>
        <!-- we need this otherwise ./artemis data imp wouldn't work -->
        <permission type="manage" roles="amq"/>
      </security-setting>
    </security-settings>
    <address-settings>
      <address-setting match="testQueue">
        <!-- default is 1.0 -->
        <redelivery-delay-multiplier>1.0</redelivery-delay-multiplier>
        <!-- default is 0 (no delay) -->
        <redelivery-delay>0</redelivery-delay>
        <!-- default is 0.0) -->
        <redelivery-collision-avoidance-factor>0.0</redelivery-collision-avoidance-factor>
        <!-- USED FOR TESTS -->
        <max-redelivery-delay>0</max-redelivery-delay>
        <dead-letter-address>DLQ</dead-letter-address>
        <!-- USED FOR TESTS -->
        <max-delivery-attempts>3</max-delivery-attempts>
      </address-setting>
    </address-settings>
    <addresses>
      <address name="testQueue">
        <anycast>
          <queue name="testQueue">
            <durable>true</durable>
          </queue>
        </anycast>
      </address>
    </addresses>
    <security-enabled>false</security-enabled>
  </core>
</configuration>
